返回长度
int LCS(string s1, string s2) {
    int n1 = s1.size(), n2 = s2.size();
    //string s;
    if (!n1 || !n2) return 0;
    vector<vector<int>> res(n1+1, vector<int>(n2+1, 0));
    int count = 0;
    for (int i = 1; i <= n1; i++)
        for (int j = 1; j <= n2; j++) {
            if (s1[i-1] == s2[j-1])
                res[i][j] = 1+res[i-1][j-1];
            else
                res[i][j] = max(res[i-1][j], res[i][j-1]);
            count = max(count, res[i][j]);
        }
    return count;
}

返回子序列
string LCS(string s1, string s2) {
    int n1 = s1.size(), n2 = s2.size();
    string s;
    if (!n1 || !n2) return 0;
    vector<vector<string>> res(n1+1, vector<string>(n2+1));
    for (int i = 1; i <= n1; i++)
        for (int j = 1; j <= n2; j++) {
            if (s1[i-1] == s2[j-1]) {
                string tmp;
                tmp.push_back(s1[i-1]);
                res[i][j] = res[i-1][j-1]+tmp;
            } else {
                res[i][j] = (res[i-1][j].size()>res[i][j-1].size())?(res[i-1][j]):(res[i][j-1]);
            }
            s = (s.size()>res[i][j].size())?(s):(res[i][j]);
        }
    return s;
}
