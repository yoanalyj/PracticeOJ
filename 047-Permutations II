Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        if (nums.empty()) return res;
        int N = nums.size();
        if (N == 1) { 
            res.push_back(nums); 
            return res;
        }
        sort(nums.begin(), nums.end());
        for (int i = 0; i < N; i++) {
            if (i > 0 && nums[i] == nums[i-1])
                continue;
            vector<int> nums2(nums.begin(), nums.end());
            nums2.erase(nums2.begin()+i);
            vector<vector<int>> tmp = permuteUnique(nums2);
            if (!tmp.empty()) {
                for (int j = 0; j < tmp.size(); j++) {
                    tmp[j].insert(tmp[j].begin(), nums[i]);
                }
                res.insert(res.end(), tmp.begin(), tmp.end());
            }
        }
        return res;
    }
};
