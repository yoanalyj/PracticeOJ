/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.
*/
//分析:出现超过n/2次数的,只可能有一个.3.5下取整就是3,上取整就是4.
//解法1:o(nlogn),space(1),排序后,出现超过n/2次数的一定跨过数组最中间.所以nums[n/2]一定是.
/*class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        return nums[n/2];
    }
};*/

//解法2:o(n),space(1), Moore voting algorithm,专门为该问题"找出出现超过⌊n/k⌋次数的元素"的解决方案.
/*找到k个不同的元素,成对删除.那么剩下的就是出现超过⌊n/k⌋次数的元素了.(Find k different element, and "remove" them as a group, the remaining element must be the element that appears more than ⌊n/k⌋ times. )
在这个题中,k = 2,即每找出两个不同的element，则成对删除。最终剩下的一定就是所求的。*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int elem = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (count == 0) {
                elem = nums[i];
                count = 1;
            } else {
                if (elem == nums[i])    
                    count++;
                else 
                    count--;
            }
        }
        return elem;
    }
};
