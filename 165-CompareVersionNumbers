/*
Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37
*/
//version numbers版本号.the . character可能有也可能没有,可能有多个.
//!注意特殊情况,1.0和1认为是相等的.在有数字的地方,永远不要忘了有0是否是特殊情况.
class Solution {
public:
    int getDigit(string s, int &i) {
        string res;
        while (s[i] != '.' && i < s.size()) {
            res = res + s[i];
            i++;
        }
        return stoi(res);
    }
    int compareVersion(string version1, string version2) {
        int num1, num2;
        int ii = 0, jj = 0;
        int &i = ii, &j = jj;
        while ((i < version1.size()) && (j < version2.size())) {
            num1 = getDigit(version1, i);
            num2 = getDigit(version2, j);
            if (num1 > num2)
                return 1;
            else if (num1 < num2)
                return -1;
                else {
                    i++;
                    j++;
                }
        }
        if (i < version1.size()) {
            if (getDigit(version1, i))//1.0和1是相等的.
                return 1;
        }
        if (j < version2.size()) {
            if (getDigit(version2, j))
                return -1;
        }
        return 0;
    }
};
//atoi(const char *ptr),只能是const 字符串才行,而且遇到跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时('\0')才结束转换，并将结果返回。
//即char a[] = "-100",char b[] = "356.8",b转完后是356.0,不过负数100是可以的.
