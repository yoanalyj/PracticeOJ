Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int N = nums.size();
        vector<vector<int>> res;
        if (!N) return res;
        if (N == 1) {
            res.push_back(nums);
            return res;
        }
        for (int i = 0; i < N; i++) {
            vector<int> tmp(nums.begin(), nums.end());
            tmp.erase(tmp.begin()+i);
            vector<vector<int>> r = permute(tmp);
            for (int j = 0; j < r.size();j++) {
                r[j].insert(r[j].begin(), nums[i]);
            }
            res.insert(res.end(), r.begin(), r.end());
        }
        return res;
    }
};
