/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 *//
 就是在中序遍历中加入计数,递归非递归均可.
//非递归
int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> s;
        int res, count=0;
        TreeNode* p = root;
        while (p || !s.empty()) {
            while (p) {
                s.push(p);
                p = p->left;
            }
            p = s.top();
            s.pop();
            count++;
            if (count == k) return p->val;
            p = p->right;
        }
    }
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> ss;
        stack<int> s;
        ss.push(root);
        s.push(2);
        int n = 0;
        while (!ss.empty()) {
            TreeNode* tmp = ss.top();
            int t = s.top();
            if (t == 2) {
                ss.pop();
                s.pop();
                if (tmp->right) {
                    ss.push(tmp->right);
                    s.push(2);
                } 
                ss.push(tmp);
                s.push(0);
                if (tmp->left) {
                    ss.push(tmp->left);
                    s.push(2);
                }
            } else {
                ss.pop();
                s.pop();
                n++;
                if (n == k) return tmp->val;
            }
        }
    }
};
//递归
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int res, count = 0;
        process(root, count, k, res);
        return res;
    }
    bool process(TreeNode* root, int &count, int k, int &res) {
        if (!root) return false;
        if(process(root->left, count, k, res)) return true;
        count++;
        if (count == k) {
            res = root->val;
            return true;
        }
        return process(root->right, count, k, res);
    }
};
