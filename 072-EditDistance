编辑距离,即将word1变为word2,需要多少steps.step包括insert,replace以及delete.
动态转移方程为,word1[i] = word2[j],res[i][j] = res[i-1][j-1].else, res[i][j] = min(res[i-1][j-1], min(res[i][j-1], res[i-1][j]))+1
注意初始值0行和0列并不为0;
res[i-1][j-1]+1:replace; res[i-1][j]:delete; res[i][j-1]:insert;

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size(), n2 = word2.size();
        if (!n1) return n2;
        if (!n2) return n1;
        vector<vector<int>> res(n1+1, vector<int>(n2+1, 0));
        for (int i = 1; i <= n1; i++) res[i][0] = i;
        for (int i = 1; i <= n2; i++) res[0][i] = i;
        for (int i = 1; i <= n1; i++) 
            for (int j = 1; j <= n2; j++) {
                if (word1[i-1] == word2[j-1])
                    res[i][j] = res[i-1][j-1];
                else 
                    res[i][j] = min(res[i-1][j-1], min(res[i][j-1], res[i-1][j]))+1;
            }
        return res[n1][n2];
    }
};
