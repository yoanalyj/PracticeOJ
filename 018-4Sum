/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
*/

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if (nums.size() < 4) return vector<vector<int>>();
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (i > 0 && nums[i] == nums[i-1])//去重复
                continue;
            
            for (int j = i+1; j < nums.size(); j++) {
                if (j > i+1 && nums[j] == nums[j-1])//去重复
                    continue;
                int twosum = target - nums[i] - nums[j];
                int pre = j+1, post = nums.size()-1;
                while (pre < post) {
                    if (pre > j+1 && nums[pre] == nums[pre-1]) {//去重复
                        pre++;
                        continue;
                    }
                    if (post < nums.size()-1 && nums[post] == nums[post+1]) {
                        post--;
                        continue;
                    }
                    if (nums[pre] + nums[post] > twosum) {
                        post--;
                    } else if (nums[pre] + nums[post] < twosum) {
                        pre++;
                    } else {
                        res.push_back(vector<int>{nums[i], nums[j], nums[pre], nums[post]});
                        pre++;
                        post--;
                    }
                }
            }
        }
        return res;
    }
};

//K sum,用递归实现通用解决办法.
//http://tech-wonderland.net/blog/summary-of-ksum-problems.html
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        return process(nums, 0, nums.size()-1, 4, target);
    }
    vector<vector<int>> process(vector<int>& nums, int beg, int end, int k, int target) {
        vector<vector<int>> res;
        vector<vector<int>> tmp;
        if (k != 2) {
            for (int i = beg; i <= end; i++) {
                if (i > beg && nums[i] == nums[i-1]) continue;
                tmp = process(nums, i+1, end, k-1, target-nums[i]);
                if (!tmp.empty()) {
                    for (int l = 0; l < tmp.size(); l++)//巧妙之处:递归实现Ksum并不难,就是如何找回上一个值.用vector进行insert.
                        tmp[l].insert(tmp[l].begin(), nums[i]);//这是固定一个值,得到的结果.
                    res.insert(res.end(), tmp.begin(), tmp.end());//这是固定不同的值,得到的总的结果.
                }
            }
        } else {
            int pre = beg, post = nums.size()-1;
            while (pre < post) {
                if (pre > beg && nums[pre] == nums[pre-1]) {pre++; continue;}
                if (post < nums.size()-1 && nums[post] == nums[post+1]) {post--; continue;}
                if (nums[pre] + nums[post] == target) {
                    res.push_back(vector<int>{nums[pre],nums[post]});
                    pre++;
                    post--;
                } else if (nums[pre] + nums[post] > target) {
                    post--;
                } else {
                    pre++;
                }
            }
        }
        return res;
    }
};
