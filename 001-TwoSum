/*
Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2
*/
class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> res;
        vector<pair<int, int> > st;
        for (int i = 0; i<numbers.size(); i++){
            st.push_back(make_pair(numbers[i], i+1));//make_pair(a,b)生成pair.
        }
        sort(st.begin(), st.end());//排序本身的复杂度是nlogn,然后加上,查找的复杂度是n
        for (int i = 0, j = numbers.size()-1; i < j; i++){
            while (i<j && st[i].first + st[j].first > target){
                j--;
            }
            if (i < j && st[i].first + st[j].first == target){
                res.push_back(st[i].second);
                res.push_back(st[j].second);
                if (res[0] > res[1]) swap(res[0], res[1]);
                break;
            }
        }
        return res;
    }
};

//map，set的设计是为了快速查找元素。
所以设计为红黑树或平衡二叉树。

如果楼主有随机访问的需求，
要直接访问第二个元素。
请使用vector。
如果是对组，可以使用，
vector< pair<std::string, int> > 
iter + n == 随机访问,
是要内存连续存储的，如vector，string。
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        multimap<int, int> mmp;
        vector<int, int> res;
        for (int i = 0; i<numbers.size(); i++){
            mmp.insert(make_pair(numbers[i], i+1));
        }
        for (int i = 0; i < numbers.size(); i++) {
            multimap<int, int>::iterator pos1, pos2;
            pos1 = mmp.begin() + i;///!!!!!!错误,map不能使用iterator+i
            pos2 = mmp.find(target - pos1->first);
            if( pos2 != mmp.end()) {
                res.push_back(pos1->second);
                res.push_back(pos2->second);
            }
        }
        return res;
    }
};
