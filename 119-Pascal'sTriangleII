/*
Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?
*/
//最简单思路,先生成k行的杨辉三角,再返回第k行.但是空间复杂度是k的平方.
//将该三角形的左边对齐，就能够发现，tri[i][j] = tri[i-1][j-1] + tri[i-1][j]。但是要从后往前扫,如果从前往后,就会用到新的值.
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        if (rowIndex < 0) return vector<int>();
        vector<int> res(rowIndex+1, 0);//理解这个,在于把每一行都补齐补0.
        res[0] = 1;
        for (int i = 1; i <= rowIndex; i++) {
            res[rowIndex] = 1;
            for (int j = rowIndex-1; j > 0; j--) {
                res[j] = res[j-1] + res[j];
            }
            res[0] = 1;
        }
        return res;
    }
};
//??遗留:有没有可能从前边开始扫,每次tri[i][j] = tri[i-1][j+1] + tri[i-1][j]
/*class Solution {
public:
    vector<int> getRow(int rowIndex) {
        if (rowIndex < 0) return vector<int>();
        vector<int> res(rowIndex+1);
        res[0] = 1;
        for (int i = 1; i <= rowIndex; i++) {
            res[0] = 1;
            for (int j = 1; j < i; j++) {
                res[j] = res[j+1] + res[j];
            }
            res[rowIndex] = 1;
        }
        return res;
    }
};*/
