/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//只需要将每层插入到vector的begin位置.或者调用c++函数reverse(v.begin(), v.end())!!!也有string.begin(),之前那些人太狡诈了.
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if (!root) return vector<vector<int>>();
        vector<vector<int>> levs;
        vector<int> lev;
        queue<TreeNode*> qtree;
        qtree.push(root);
        qtree.push(NULL);
        while (1) {
            TreeNode* tmp = qtree.front(); qtree.pop();
            if (!tmp) {
                levs.insert(levs.begin(),lev);
                lev.clear();
                if (qtree.empty()) return levs;
                qtree.push(NULL);
                continue;
            }
            lev.push_back(tmp->val);
            if (tmp->left)  qtree.push(tmp->left);
            if (tmp->right) qtree.push(tmp->right);
        }
    }
};
