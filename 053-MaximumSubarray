Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.empty()) return 0;
        int max_res = nums[0];
        vector<int> max_nums(nums.size());
        max_nums[0] = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            max_nums[i] = max(max_nums[i-1] + nums[i], nums[i]);
            max_res = max(max_nums[i], max_res);
        }
        return max_res;
    }
};
//动态转移方程max_nums[i]代表的是,以i结尾的最大"子序列"(开头位置并不一定)它的最大值.而不是以i结尾的数组.所以肯定得有nums[i]这个值.
