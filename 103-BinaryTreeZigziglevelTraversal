Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
 Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7



return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if (!root) return res;
        queue<TreeNode*> qnode;
        qnode.push(root);
        qnode.push(NULL);
        vector<int> lev;
        int count = 1;
        while (!qnode.empty()) {
            TreeNode* tmp = qnode.front();
            qnode.pop();
            if (!tmp) {
                res.push_back(lev);
                if (qnode.empty()) return res;
                qnode.push(NULL);
                lev.clear();
                count = count^1;
            } else {
                if (count) {
                    lev.push_back(tmp->val);
                } else {
                    lev.insert(lev.begin(), tmp->val);
                }
                if (tmp->left) qnode.push(tmp->left);
                if (tmp->right) qnode.push(tmp->right);
            }
        }
    }
};
