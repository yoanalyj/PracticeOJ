A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.
//和爬楼梯是一样的,用递归重复计算多.
//用动态规划
class Solution {
public:
    int numDecodings(string s) {
        int N = s.size();
        if (!N) return 0;
        vector<int> res(N+1, 0);
        if (s[0] == '0') return 0;
        res[0] = 1;
        res[1] = 1;      
        for (int i = 2; i <= N; i++) {
            if (s[i-1] == '0') {
                if (s[i-2] == '1' || s[i-2] == '2')
                    res[i] += res[i-2];
                else return 0;
            } else {
                res[i] += res[i-1];
                if (s[i-2] == '1') res[i] += res[i-2];
                else if (s[i-2] == '2' && s[i-1] <= '6') res[i] += res[i-2];
            }
        }
        return res[N];
    }
};
//前提默认都是digit即0-9.不需再判断.
