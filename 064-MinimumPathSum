Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if (grid.empty()) return 0;
        int M = grid.size(), N = grid[0].size();
        vector<int> tmp(N);
        vector<vector<int>> res(M, tmp);
        //int res[M][N];
        res[0][0] = grid[0][0];
        for (int i = 1; i < M; i++) 
            res[i][0] = res[i-1][0]+grid[i][0];
        for (int j = 1; j < N; j++)
            res[0][j] = res[0][j-1]+grid[0][j];
        
        for (int j = 1; j < N; j++)
            for (int i = 1; i < M; i++) {
                res[i][j] = min(res[i][j-1], res[i-1][j])+grid[i][j];
            }
        return res[M-1][N-1];     
    }
};
//最简单的方格子动态规划,每次只能走两个方向,而且起点定,终点定.
//第一次自己做动态规划,动态转移方程等于左边或上边的值加上自己的值.
//出错点:需不需要分配M+1和N+1,分配的话,值是0还是INT_MAX需要自己走一遍.其实如果不分配的话,完全可以.
//分配二维数组,既可以vector,也可以int [m][n](少写字儿)
