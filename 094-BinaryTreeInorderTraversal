Given a binary tree, return the inorder traversal of its nodes' values.

For example:
 Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3



return [1,3,2]. 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        process(root, res);
        return res;
    }
    void process(TreeNode* root, vector<int> &res) {
        if (!root) return;
        process(root->left, res);
        res.push_back(root->val);
        process(root->right, res);
        return;
    }*/
    
    
    
    //非递归解法1
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if (!root) return res;
        stack<TreeNode*> s;
        stack<int> ss;
        s.push(root);
        ss.push(2);
        while(!s.empty()) {
            int t = ss.top();
            TreeNode* tmp = s.top();
            if (t == 2) {
                s.pop();ss.pop();
                if (tmp->right) { 
                    s.push(tmp->right);
                    ss.push(2);
                }
                s.push(tmp);
                ss.push(0);
                if (tmp->left) {
                    s.push(tmp->left);
                    ss.push(2);
                }
            } else {
                res.push_back(tmp->val);
                s.pop();
                ss.pop();
            }
        }
        return res;
    }
    //解法2
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if (!root) return res;
        stack<TreeNode*> s;
        TreeNode* node = root;
        while (node || !s.empty()) {
            while (node) {
                s.push(node);
                node = node->left;
            }
            if (!s.empty()) {
                node = s.top();s.pop();
                res.push_back(node->val);
                node = node->right;
            }
        }
        return res;
    }
    //解法3
    vector<int> inorderTraversal(TreeNode *root) {  
        vector<int> path;  
        if (root == NULL)  
            return path;  
              
        TreeNode *cur = root;  
        TreeNode *pre = NULL;  
        while (cur != NULL)  
        {  
            if (cur->left == NULL)  
            {  
                path.push_back(cur->val);  
                cur = cur->right;  
            }  
            else  
            {  
                pre = cur->left;  
                while (pre->right != NULL && pre->right != cur)  
                    pre = pre->right;  
                if (pre->right == NULL)  
                {  
                    pre->right = cur;  
                    cur = cur->left;  
                }  
                else  
                {  
                    pre->right = NULL;  
                    path.push_back(cur->val);  
                    cur = cur->right;  
                }  
            }  
        }  
        return path;  
    }  

};
