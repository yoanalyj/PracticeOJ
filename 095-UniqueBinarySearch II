Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//动态规划,先用递归思想实现.
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        return process(1, n);
    }
    vector<TreeNode*> process(int beg, int end) {
        vector<TreeNode*> res;
        if (beg > end) {
            res.push_back(NULL);
            return res;
        }
        for (int i = beg; i <= end; i++) {
            vector<TreeNode*> tmp1 = process(beg, i-1);
            vector<TreeNode*> tmp2 = process(i+1, end);
            for (int k = 0; k < tmp1.size(); k++)
                for (int j = 0; j < tmp2.size(); j++) {
                    TreeNode* r = new TreeNode(i);
                    r->left = tmp1[k];
                    r->right = tmp2[j];
                    res.push_back(r);
                }
        }
        return res; 
    }
};
