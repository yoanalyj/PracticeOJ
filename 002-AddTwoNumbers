You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if (!l1 || !l2) return (l1)?(l1):(l2);
        ListNode* r;
        ListNode m(0);
        r = &m;
        int carry = 0;
        while (l1 || l2 || carry) {
            int sum = carry;
            if (l1) {
                sum = sum + l1->val;
                l1 =l1->next;
            }
            if (l2) {
                sum = sum + l2->val;
                l2 = l2->next;
            }
            carry = sum/10;
            sum = sum%10;
            ListNode *node = new ListNode(sum);//!new的话,不需要写变量名h
            r->next = node;
            r = node;
            //ListNode h(sum);r->next = &h; r = &h;//??这样写不可以,应该是因为临时变量出了这个while就会回收空间的.
        }
        return m.next;
        
    }
};
