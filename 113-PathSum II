Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        return process(root, sum).second;
    }
    pair<bool, vector<vector<int>>> process(TreeNode* root, int sum) {
        vector<vector<int>> res;
        bool flag = false;
        if (!root) return make_pair(false, res);
        if (root->val == sum && !root->left && !root->right) {
            vector<int> tmp;
            tmp.push_back(root->val);
            res.push_back(tmp);
            return make_pair(true, res);
        }
        pair<bool, vector<vector<int>>> left = process(root->left, sum-root->val);
        pair<bool, vector<vector<int>>> right = process(root->right, sum-root->val);
        if (left.first) {
            for (int i = 0; i < left.second.size(); i++)
                left.second[i].insert(left.second[i].begin(), root->val);
            res.insert(res.end(), left.second.begin(), left.second.end());
            flag = true;
        }
        if (right.first) {
            for (int i = 0; i < right.second.size(); i++)
                right.second[i].insert(right.second[i].begin(), root->val);
            res.insert(res.end(), right.second.begin(), right.second.end());
            flag = true;
        }
        return make_pair(flag, res);
    }
};
