/*
Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/
//通用解法1:排序
/*class Solution {
public:
    int singleNumber(vector<int>& nums) {
        if (nums.size() == 1) return nums[0];
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size()-1; i++) {
            if(nums[i] != nums[i+1])
                return nums[i];
            else 
                i = i+2;
        }
        return nums[nums.size()-1];
    }
};
*/
//通用解法2:位运算
//将nums元素所有位上的数字相加,int是32位,从最低位加起,然后对3取余数,如果为1,就是singlenumber上的1,就把它左移,循环结果相加.
//O(32*N),空间是常数,这是一个通用的解法,如果把出现3次改为k次，那么只需模k就行了
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        vector<int> bitnums(32, 0);
        int res = 0;
        for (int i = 0; i < 32; i++) {
            for(int j = 0; j < nums.size(); j++) {
                if((nums[j] >> i) & 1)
                    bitnums[i]++;
            }
            res = res + ((bitnums[i]%3)<<i);
        }
        return res;
    }
};
