/*Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 /*
 先找出镜像是怎么达到,然后观察什么样特征才能达到镜像和自己是一样的.
 如何求出镜像:即,拿到一个树,如果都为空,不做处理.否则,交换它的两个左右子树.
 什么样的特征才能达到镜像和自己是一样的.两个子树进行比较,如果是空,都要为空.如果都不空,那么值要一样,而且左的右子树和右的坐子树要一样,左的左子树要和右的右子树一样.
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return !root || cmpTree(root->left, root->right);
    }
    bool cmpTree(TreeNode* left, TreeNode* right) {
        if (!left)  return (right == NULL);
        if (!right) return false;
        if (left->val != right->val)
            return false;
        else
            return (cmpTree(left->left, right->right) && cmpTree(left->right, right->left));
    }
};


//迭代.用for循环实现或者栈.
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) return true;
        stack<TreeNode*> s;
        s.push(root->left);
        s.push(root->right);
        while (!s.empty()) {
            TreeNode* t1 = s.top;
            s.pop();
            TreeNode* t2 = s.top;
            s.pop();
            if(!t1 && !t2) continue;
            if (!t1 && t2 || t1 && !t2 || t1->val != t2->val) return false;
            s.push(t1->right);
            s.push(t2->left);
            s.push(t1->left);
            s.push(t2->right);
        }
        return true;
    }
};
