/*
Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.
*/
//解法1
//求1的个数,和0x1进行与,是1就说明最后一位不为0.
//教训:一个&表示按位与.
//n>>1右移只是运算符和+一样,不是赋值.n>>=1才是赋值
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0;
        while(n) {
            if (n & 1)
                res ++;
            n = n>>1;
        }
        return res;
    }
};
解法2
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0;
        while(n) {
            res ++;
            n = (n-1)&n;
        }
        return res;
    }
};

解法1不适用于负数,因为负数左移右移,符号位是不变的,所以会陷入死循环.
解法2适用于正负数和0.在计算机中负数是用补码表示的,补码为反码+1.
-3-1=-3的补码用算式和1进行相减,得到的就是补码.

提升:
把一个整数减去1之后再和之前的整数做位与运算,得到的结果相当于把整数的二进制表示中的最右边一个1变成0.很多二进制的问题都可以用这个
思路解决.
1.用一条语句判断一个整数是不是2的整数次方.
如果一个整数是2的整数次方,那么它的二进制中只有一位为1,其他的都为0.那么如果(n-1)&n为0的话,就说明是整数次方.
2.
