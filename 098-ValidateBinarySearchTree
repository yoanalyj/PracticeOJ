Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        TreeNode* pre = NULL;
        return process(root, pre);
    }
    bool process(TreeNode* &root, TreeNode* &pre) {
        if (!root) return true;
        if (!process(root->left, pre)) return false;
        if (pre && pre->val >= root->val) return false;//不允许有等于的情况.
        pre = root;//关键.
        if (!process(root->right, pre)) return false;
        return true;
    }
};
