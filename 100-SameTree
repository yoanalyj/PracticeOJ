/*
Given two binary trees, write a function to check if they are equal or not.

Two binary trees are considered equal if they are structurally identical and the nodes have the same value.
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// 类似于101 镜像树
//递归
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if ((p && !q) ||(!p && q)) return false;
        if (!p && !q) return true;
        if (p->val != q->val) return false;
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};

//迭代,每次从栈中取出两个,比较是否一样.注意每次放两个.
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        stack<TreeNode*> ss;
        ss.push(p);
        ss.push(q);
        while (!ss.empty()) {
            TreeNode* t1 = ss.top();ss.pop();
            TreeNode* t2 = ss.top();ss.pop();
            if ((!t1 && t2) || (t1 && !t2)) return false;
            if (!t1 && !t2) continue;
            if (t1->val != t2->val) return false;
            ss.push(t1->right);
            ss.push(t2->right);
            ss.push(t1->left);
            ss.push(t2->left);
        }
        return true;
    }
};
