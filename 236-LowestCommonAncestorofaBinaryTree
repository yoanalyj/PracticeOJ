Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. 

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).” 
        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4


For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* res = NULL;
        process(root, p, q, res);
        return res;
    }
    int process(TreeNode* root, TreeNode* p, TreeNode* q, TreeNode* &res) {
        if (!root) return 0;
        int r = 0;
        int left = process(root->left, p, q, res);
        if (left == 2) return left;
        int right = process(root->right, p, q, res);
        if (right == 2) return right;
        if (root == p || root == q) r++;
        r = r+left+right;
        if (r == 2) res = root;
        return r;
    }
};
