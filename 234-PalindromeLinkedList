Given a singly linked list, determine if it is a palindrome.

Follow up:
 Could you do it in O(n) time and O(1) space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) return true;
        ListNode h(0);
        ListNode *pre = &h,*post = &h;
        h.next = head;
        stack<int> res;
        while (post && post->next) {
            pre = pre->next;
            post = post->next->next;
            res.push(pre->val);
        }
        if (!post) res.pop();
        pre = pre->next;
        while (pre) {
            if (pre->val == res.top()) {
                pre = pre->next;
                res.pop();
            } else {
                return false;
            }
        }
        return true;
    }
};
