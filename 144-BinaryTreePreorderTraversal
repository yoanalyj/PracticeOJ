/*递归和迭代两种方法实现,先序遍历二叉树.
//根左右.(没有根右左)
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //recursively递归.(首次手写bugfree)
 //用指针.和用引用效果应该是相同的.如果用引用,只需要在process函数入口参数将指针改为&v.调用的时候,直接赋值res就可以了.
/*class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if (!root) return vector<int> ();
        vector<int> res;
        res.push_back(root->val);
        process(root->left, &res);
        process(root->right, &res);
        return res;
    }
    bool process(TreeNode* r, vector<int> *v) {
        if (!r) return true;
        (*v).push_back(r->val);
        if (r->left) process(r->left, v);
        if (r->right) process(r->right, v);
        return true;
    }
};*/

//iteratively迭代.(首次bugfree)
//先入栈右子树,再入栈左子树,才能保证出栈是先出左子树.
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if (!root) return vector<int> ();
        stack<TreeNode*> s;
        vector<int> res;
        res.push_back(root->val);
        if (root->right) s.push(root->right);
        if (root->left) s.push(root->left);
        while (!s.empty()) {
            TreeNode* tmp = s.top();
            res.push_back(tmp->val);
            s.pop();
            if (tmp->right) s.push(tmp->right);
            if (tmp->left) s.push(tmp->left);
        }
        return res;
    }
    
    //参考,迭代,空间o(1)
    vector<int> preorderTraversal(TreeNode *root) {  
        vector<int> path;  
        if (root == NULL)  
            return path;  
              
        TreeNode *cur = root;  
        TreeNode *pre = NULL;  
          
        while (cur != NULL)  
        {  
            if (cur->left == NULL)  
            {  
                path.push_back(cur->val);  
                cur = cur->right;  
            }  
            else  
            {  
                pre = cur->left;  
                while (pre->right != NULL && pre->right != cur)  
                    pre = pre->right;  
                if (pre->right == NULL)  
                {  
                    pre->right = cur;  
                    path.push_back(cur->val);  
                    cur = cur->left;  
                }  
                else  
                {  
                    pre->right = NULL;  
                    cur = cur->right;  
                }  
            }  
        }  
        return path;  
    } 
};
